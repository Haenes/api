services:

  backend:
    container_name: backend
    build: ./backend
    entrypoint: sh ./entrypoint.sh
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 100M
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
  
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      args:
        - VITE_BACKEND_URL=${BACKEND_URL}
    ports:
      - "5173:5173"
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 50M
    restart: unless-stopped
  
  celery:
    container_name: api-celery
    build: ./backend
    command: sh -c "cd src && celery --app main:celery worker --loglevel INFO --pool gevent"
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 100M
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
    container_name: api-db
    build: ./backend/deploy/db
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 50M
    volumes:
      - ./backend/deploy/db/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U$$POSTGRES_USER -d$$POSTGRES_DB"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    container_name: api-redis
    build: ./backend/deploy/redis
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 10M
    volumes:
      - ./backend/deploy/redis/data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: unless-stopped
